{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["runeStyleStage0","color","animation","runeStyleStage1","textShadowColor","runeStyleStage2","runeStyleStage3","runeStyleStage4","runeStyleStage5","App","React","useState","counter","setCounter","runeStyle","setRuneStyle","roomColor","setRoomColor","useEffect","timer","setInterval","clearInterval","className","style","backgroundColor","id","class","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAGMA,G,MAAkB,CACtBC,MAAO,UACPC,UAAW,2CAEPC,EAAkB,CACtBF,MAAO,UACPG,gBAAiB,UACjBF,UAAW,gCAEPG,EAAkB,CACtBJ,MAAO,UACPG,gBAAiB,UACjBF,UAAW,8BAEPI,EAAkB,CACtBL,MAAO,SACPG,gBAAiB,SACjBF,UAAW,+BAEPK,EAAkB,CACtBN,MAAO,QACPG,gBAAiB,UAEbI,EAAkB,CACtBP,MAAO,QACPG,gBAAiB,UAgEJK,MA7Df,WAAgB,IAAD,EACiBC,IAAMC,SAAS,IADhC,mBACNC,EADM,KACGC,EADH,OAEqBH,IAAMC,SAASX,GAFpC,mBAENc,EAFM,KAEKC,EAFL,OAGqBL,IAAMC,SAAS,WAHpC,mBAGNK,EAHM,KAGKC,EAHL,KA0Cb,OAhCAP,IAAMQ,WAAU,WACd,OAAQN,GACN,KAAK,GACHG,EAAaf,GACbiB,EAAa,WACb,MACF,KAAK,GACHF,EAAaZ,GACbc,EAAa,WACb,MACF,KAAK,EACHF,EAAaV,GACb,MACF,KAAK,EACHU,EAAaT,GACbW,EAAa,SACb,MACF,KAAK,EACHF,EAAaR,GACb,MACF,KAAK,EACHQ,EAAaP,GACbS,EAAa,SAKjB,IAAME,EACJP,EAAU,GAAKQ,aAAY,kBAAMP,EAAWD,EAAU,KAAI,KAC5D,OAAO,kBAAMS,cAAcF,MAC1B,CAACP,IAGF,qBAAKU,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAaC,MAAO,CAAEC,gBAAiBR,GAAzD,UACE,8BACE,oBAAIS,GAAG,UAAUH,UAAU,qBAAqBC,MAAOT,EAAvD,SACGF,MAGL,wBACA,8BACE,wBAAQc,MAAM,SAASC,QA/CR,WACrBd,EAAW,KA8CL,0DCvEKe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3e811c66.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./App.scss\";\nconst runeStyleStage0 = {\n  color: \"#52aafb\",\n  animation: \"glow 1s ease-in-out infinite alternate\",\n};\nconst runeStyleStage1 = {\n  color: \"#ffcc00\",\n  textShadowColor: \"#ffcc00\",\n  animation: \"blinker 1.5s linear infinite\",\n};\nconst runeStyleStage2 = {\n  color: \"#f6830f\",\n  textShadowColor: \"#f6830f\",\n  animation: \"blinker 1s linear infinite\",\n};\nconst runeStyleStage3 = {\n  color: \"#aa3a3\",\n  textShadowColor: \"#aa3a3\",\n  animation: \"blinker 0.5 linear infinite\",\n};\nconst runeStyleStage4 = {\n  color: \"white\",\n  textShadowColor: \"#white\",\n};\nconst runeStyleStage5 = {\n  color: \"black\",\n  textShadowColor: \"#black\",\n};\n\nfunction App() {\n  const [counter, setCounter] = React.useState(20);\n  const [runeStyle, setRuneStyle] = React.useState(runeStyleStage0);\n  const [roomColor, setRoomColor] = React.useState(\"#DCDCDC\");\n\n  const onCounterClick = () => {\n    setCounter(20);\n  };\n\n  // Third Attempts\n  React.useEffect(() => {\n    switch (counter) {\n      case 20:\n        setRuneStyle(runeStyleStage0);\n        setRoomColor(\"#696969\");\n        break;\n      case 14:\n        setRuneStyle(runeStyleStage1);\n        setRoomColor(\"#282c34\");\n        break;\n      case 9:\n        setRuneStyle(runeStyleStage2);\n        break;\n      case 6:\n        setRuneStyle(runeStyleStage3);\n        setRoomColor(\"black\");\n        break;\n      case 1:\n        setRuneStyle(runeStyleStage4);\n        break;\n      case 0:\n        setRuneStyle(runeStyleStage5);\n        setRoomColor(\"white\");\n        break;\n      default:\n        break;\n    }\n    const timer =\n      counter > 0 && setInterval(() => setCounter(counter - 1), 2000);\n    return () => clearInterval(timer);\n  }, [counter]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" style={{ backgroundColor: roomColor }}>\n        <div>\n          <h1 id=\"counter\" className=\"timer-display glow\" style={runeStyle}>\n            {counter}\n          </h1>\n        </div>\n        <div></div>\n        <div>\n          <button class=\"button\" onClick={onCounterClick}>\n            ᛖᛁᛊᚢᛒᚦ\n          </button>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}